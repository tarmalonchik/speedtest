// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bank.proto

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BankService_Ping_FullMethodName            = "/sdk.BankService/Ping"
	BankService_AvailableNodes_FullMethodName  = "/sdk.BankService/AvailableNodes"
	BankService_AddNodesResults_FullMethodName = "/sdk.BankService/AddNodesResults"
	BankService_GetNodeSpeed_FullMethodName    = "/sdk.BankService/GetNodeSpeed"
)

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	AvailableNodes(ctx context.Context, in *AvailableNodesRequest, opts ...grpc.CallOption) (*AvailableNodesResponse, error)
	AddNodesResults(ctx context.Context, in *AddNodesResultsRequest, opts ...grpc.CallOption) (*AddNodesResultsResponse, error)
	GetNodeSpeed(ctx context.Context, in *GetNodeSpeedRequest, opts ...grpc.CallOption) (*GetNodeSpeedResponse, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, BankService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) AvailableNodes(ctx context.Context, in *AvailableNodesRequest, opts ...grpc.CallOption) (*AvailableNodesResponse, error) {
	out := new(AvailableNodesResponse)
	err := c.cc.Invoke(ctx, BankService_AvailableNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) AddNodesResults(ctx context.Context, in *AddNodesResultsRequest, opts ...grpc.CallOption) (*AddNodesResultsResponse, error) {
	out := new(AddNodesResultsResponse)
	err := c.cc.Invoke(ctx, BankService_AddNodesResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) GetNodeSpeed(ctx context.Context, in *GetNodeSpeedRequest, opts ...grpc.CallOption) (*GetNodeSpeedResponse, error) {
	out := new(GetNodeSpeedResponse)
	err := c.cc.Invoke(ctx, BankService_GetNodeSpeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility
type BankServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	AvailableNodes(context.Context, *AvailableNodesRequest) (*AvailableNodesResponse, error)
	AddNodesResults(context.Context, *AddNodesResultsRequest) (*AddNodesResultsResponse, error)
	GetNodeSpeed(context.Context, *GetNodeSpeedRequest) (*GetNodeSpeedResponse, error)
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (UnimplementedBankServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBankServiceServer) AvailableNodes(context.Context, *AvailableNodesRequest) (*AvailableNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableNodes not implemented")
}
func (UnimplementedBankServiceServer) AddNodesResults(context.Context, *AddNodesResultsRequest) (*AddNodesResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodesResults not implemented")
}
func (UnimplementedBankServiceServer) GetNodeSpeed(context.Context, *GetNodeSpeedRequest) (*GetNodeSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSpeed not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s grpc.ServiceRegistrar, srv BankServiceServer) {
	s.RegisterService(&BankService_ServiceDesc, srv)
}

func _BankService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_AvailableNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).AvailableNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_AvailableNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).AvailableNodes(ctx, req.(*AvailableNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_AddNodesResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodesResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).AddNodesResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_AddNodesResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).AddNodesResults(ctx, req.(*AddNodesResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_GetNodeSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).GetNodeSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_GetNodeSpeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).GetNodeSpeed(ctx, req.(*GetNodeSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankService_ServiceDesc is the grpc.ServiceDesc for BankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BankService_Ping_Handler,
		},
		{
			MethodName: "AvailableNodes",
			Handler:    _BankService_AvailableNodes_Handler,
		},
		{
			MethodName: "AddNodesResults",
			Handler:    _BankService_AddNodesResults_Handler,
		},
		{
			MethodName: "GetNodeSpeed",
			Handler:    _BankService_GetNodeSpeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank.proto",
}
